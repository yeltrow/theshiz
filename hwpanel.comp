component hwpanel "Byte Bit converter packer unpacker for my custom hardware button panel";
/* This component is compiled using halcompile --install hwpanel.comp
** I have a control panel that is connected to an arduino.  The arduino sits on a USB cable that is talked
** to by the mb2hal driver.  The arduino maps the io into the 16 bit registers modbus wants.  I could
** have used hal to do the unpacking of bits and stuff, but it gets very messy.  I like C better.
*/ 
author "Matt Wortley";
license "GPLv2 or later";
description """This component converts responses and commands for an arduino button panel sitting on modbus """;

pin in signed reg0 "float byte 0 returned by modbus";

pin out bit FEEDHOLD "0 if latching button is pressed";
pin out bit PAUSE "0 if pressed";
pin out bit STEP "0 if pressed";
pin out bit RUN "0 if pressed";
pin out bit STOP "0 if pressed";
pin out bit XBUT "0 if pressed";
pin out bit YBUT "0 if pressed";
pin out bit ZBUT "0 if pressed";
pin out bit ABUT "0 if pressed";
pin out bit KNEEBUT "0 if pressed";
pin out bit NONEBUT "0 if pressed";
pin out bit COOLANTON "0 if pressed";
pin out bit COOLANTOFF "0 if pressed";
pin out bit SPINDLEON "0 if pressed";
pin out bit SPINDLEOFF "0 if pressed";
pin out bit HEARTBEAT "should change if alive";

function _ ;
;;

/* We check for a bit and then bitshift over to get the next one.
** It looks a little silly, but it makes it so that all we need
** to get right is the ORDER of the bits.  It makes it easier to modify.
*/
 
FUNCTION(_) {
  int r0;
  r0=reg0;
  FEEDHOLD=(r0 & (1<<15));
  r0=r0 << 1;
  PAUSE=!(r0 & ( 1<<15));
  r0=r0 << 1;
  STEP =!(r0 & ( 1<<15));
  r0=r0 << 1;
  RUN=!(r0 & ( 1<<15));
  r0=r0 << 1;
  STOP=!(r0 & ( 1<<15));
  r0=r0 << 1;
  XBUT=!(r0 & ( 1<<15));
  r0=r0 << 1;
  YBUT=!(r0 & ( 1<<15));
  r0=r0 << 1;
  ZBUT=!(r0 & ( 1<<15));
  r0=r0 << 1;
  ABUT=!(r0 & ( 1<<15));
  r0=r0 << 1;
  KNEEBUT=!(r0 & ( 1<<15));
  r0=r0 << 1;
  NONEBUT=!(r0 & ( 1<<15));
  r0=r0 << 1;
  COOLANTON=!(r0 & ( 1<<15));
  r0=r0 << 1;
  COOLANTOFF=!(r0 & ( 1<<15));
  r0=r0 << 1;
  SPINDLEON=!(r0 & ( 1<<15));
  r0=r0 << 1;
  SPINDLEOFF=!(r0 & ( 1<<15));
  r0=r0 << 1;
  HEARTBEAT=!(r0 & ( 1<<15));
  r0=r0 << 1;

/* The below is just an example of how to add function into a component.
** It doesn't do anything.
*/
   
} // End function
int testfunc ( struct __comp_state *__comp_inst ) {
  return 1;
}



